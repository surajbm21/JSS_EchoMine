import os
from flask import Flask, render_template, request, send_file, redirect, url_for
from werkzeug.utils import secure_filename
from echo_extractor import extract_echo_data  # your existing extraction function
import pandas as pd
import tempfile

app = Flask(__name__)
UPLOAD_FOLDER = 'uploads'
OUTPUT_FOLDER = 'outputs'

os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

@app.route('/')
def index():
    return render_template('index.html', result=None)

@app.route('/extract', methods=['POST'])
def extract():
    if 'pdf_files' not in request.files:
        return redirect(request.url)

    files = request.files.getlist('pdf_files')
    saved_files = []

    for file in files:
        if file.filename == '':
            continue
        filename = secure_filename(file.filename)
        path = os.path.join(UPLOAD_FOLDER, filename)
        file.save(path)
        saved_files.append(path)

    if not saved_files:
        return render_template('index.html', result="No files uploaded.")

    # Process PDFs using your extraction function
    dfs = []
    for pdf_file in saved_files:
        try:
            df = extract_echo_data(pdf_file)
            dfs.append(df)
        except Exception as e:
            print(f"Error processing {pdf_file}: {e}")

    if not dfs:
        return render_template('index.html', result="Extraction failed for all files.")

    final_df = pd.concat(dfs, ignore_index=True)
    output_path = os.path.join(OUTPUT_FOLDER, 'final_echo_output.xlsx')
    final_df.to_excel(output_path, index=False)

    message = f"âœ… Successfully extracted {len(final_df)} echo reports."

    return render_template('index.html', result=message, download_link='/download')

@app.route('/download')
def download():
    output_path = os.path.join(OUTPUT_FOLDER, 'final_echo_output.xlsx')
    return send_file(output_path, as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)
